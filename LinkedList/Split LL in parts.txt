Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.

The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.

The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.

Return an array of the k parts.




Code in CPP

Approach : 

First we need the length and divide it with k and the remainder will consider as extra nodes which will be adjusted in the first parts.

Then at the end of each part we will break the ll. prev->next = NULL

Code :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        ListNode *cur = head;
        ListNode *prev = NULL;
        vector<ListNode*> ans;
        int len = 0;

        // length
        while(cur!=NULL)
        {
            len++;
            cur=cur->next;
        }

        cur = head;
        int extra = len%k;
        int part_size = len/k;


        while(head!=NULL)
        {
            int each = part_size;
            ans.push_back(cur);

            while(each > 0)
            {
                prev = cur;
                cur=cur->next;
                each--;
            }

            if(cur != NULL && extra != 0)
            {
                extra--;
                prev = cur;    
                cur = cur->next;
            }

            // breaking the chain

            if(prev != NULL)
            {
                head = cur;
                prev->next = NULL;
            }

        
        }

        while(ans.size() != k)
        {
            ans.push_back(NULL);
        }

        return ans;
        
    }
};